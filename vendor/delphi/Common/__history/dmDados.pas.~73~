unit dmDados;

interface

uses
  SysUtils, Classes, DB, ZAbstractRODataset, ZAbstractDataset, ZDataset,
  ZConnection, IniFiles, Forms, DateUtils,StdCtrls ;

type
  TFuncionario = class
    private
    public
      Nome : string;
      Matricula : string;
      Digital : string;
      NaoEncontrado : Boolean;
  end;

type
  TdtmDados = class(TDataModule)
    cnnPrincipal: TZConnection;
    qryFuncionario: TZQuery;
    qryBatida: TZQuery;
    qryHorario: TZQuery;
    qryFuncionarios: TZQuery;
    cnnCentralizador: TZConnection;
    qryBatidasNaoImportadas: TZQuery;
    qryInserirBatida: TZQuery;
  private
    { Private declarations }
    procedure conectar_centralizador(_log : TMemo);
    function validar_horario(funcionario_id : integer; var erro : string) : boolean;
  public
    { Public declarations }
    constructor Create(AOwner : TComponent); override;
    function carregar_funcionario(matricula : string) : TFuncionario;
    function registrar_ponto(digital : string; var erro : string) : boolean;
    procedure salvar_funcionario(funcionario : TFuncionario);
    procedure exportar_batidas();
  end;

var
  dtmDados: TdtmDados;

implementation

uses uSecugen;

{$R *.dfm}

{ TdtmDados }

function TdtmDados.carregar_funcionario(matricula: string): TFuncionario;
begin
  qryFuncionario.Close;
  qryFuncionario.Params.ParamByName('registry').AsString := matricula;
  qryFuncionario.Open;

  Result := TFuncionario.Create;
  if qryFuncionario.IsEmpty then
  begin
    Result.NaoEncontrado := True;
  end
  else
  begin
    Result.Nome := qryFuncionario.FieldByName('name').AsString;
    Result.Matricula := qryFuncionario.FieldByName('registry').AsString;
    Result.Digital := qryFuncionario.FieldByName('fingerprint').AsString;
    Result.NaoEncontrado := False;
  end;
end;

procedure TdtmDados.conectar_centralizador;
begin
  with TMemIniFile.Create(ExtractFilePath(Application.ExeName) + '\config.ini') do
  try
    cnnCentralizador.HostName := ReadString('CENTRALIZADOR', 'SERVIDOR', '');
    cnnCentralizador.Database := ReadString('CENTRALIZADOR', 'BANCO', '');
    cnnCentralizador.User := ReadString('CENTRALIZADOR', 'USER', '');
    cnnCentralizador.Password := ReadString('CENTRALIZADOR', 'PASSWORD', '');
    cnnCentralizador.Connect;
  finally
    Free;
  end;
end;

constructor TdtmDados.Create(AOwner: TComponent);
begin
  inherited;
  with TMemIniFile.Create(ExtractFilePath(Application.ExeName) + '\config.ini') do
  try
    cnnPrincipal.HostName := ReadString('CONEXAO_BASE_PRINCIPAL', 'SERVIDOR', '');
    cnnPrincipal.Database := ReadString('CONEXAO_BASE_PRINCIPAL', 'BANCO', '');
    cnnPrincipal.User := ReadString('CONEXAO_BASE_PRINCIPAL', 'USER', '');
    cnnPrincipal.Password := ReadString('CONEXAO_BASE_PRINCIPAL', 'PASSWORD', '');
    cnnPrincipal.Connect;
  finally
    Free;
  end;
end;

procedure TdtmDados.exportar_batidas;
begin
  conectar_centralizador;
  qryBatidasNaoImportadas.Close;
  qryBatidasNaoImportadas.Open;
  while not qryBatidasNaoImportadas.Eof do
  begin
    with qryInserirBatida do
    begin
      Params.ParamByName('employee_id').Value := qryBatidasNaoImportadas.FieldByName('employee_id').Value;
      Params.ParamByName('date').Value := qryBatidasNaoImportadas.FieldByName('date').Value;
      Params.ParamByName('entry_1').Value := qryBatidasNaoImportadas.FieldByName('entry_1').Value;
      Params.ParamByName('exit_1').Value := qryBatidasNaoImportadas.FieldByName('exit_1').Value;
      Params.ParamByName('entry_2').Value := qryBatidasNaoImportadas.FieldByName('entry_2').Value;
      Params.ParamByName('exit_2').Value := qryBatidasNaoImportadas.FieldByName('exit_2').Value;
      Params.ParamByName('entry_3').Value := qryBatidasNaoImportadas.FieldByName('entry_3').Value;
      Params.ParamByName('exit_3').Value := qryBatidasNaoImportadas.FieldByName('exit_3').Value;
      Params.ParamByName('created_at').Value := qryBatidasNaoImportadas.FieldByName('created_at').Value;
      Params.ParamByName('updated_at').Value := qryBatidasNaoImportadas.FieldByName('updated_at').Value;
      Params.ParamByName('action').Value := qryBatidasNaoImportadas.FieldByName('action').Value;
      Params.ParamByName('obs').Value := qryBatidasNaoImportadas.FieldByName('obs').Value;
      Params.ParamByName('delay').Value := qryBatidasNaoImportadas.FieldByName('delay').Value;
      Params.ParamByName('extra').Value := qryBatidasNaoImportadas.FieldByName('extra').Value;
      ExecSQL;

    end;
    qryBatidasNaoImportadas.Next;
  end;
end;

function TdtmDados.registrar_ponto(digital: string;
  var erro: string): boolean;
var funcionario_id : integer;
    secugen : TItiumSecugen;
begin
  Result := false;
  funcionario_id := 0;
  qryFuncionarios.Close;
  qryFuncionarios.Open;

  secugen := TItiumSecugen.Create;
  if secugen.inicializar_leitor(erro) then
  begin
    try
      while not qryFuncionarios.Eof do
      begin
        if secugen.digital_confere(digital, qryFuncionarios.FieldByName('fingerprint').AsString) then
        begin
          funcionario_id := qryFuncionarios.FieldByName('id').AsInteger;
          Break;
        end;
        qryFuncionarios.Next;
      end;
    finally
      secugen.Free;
    end;

    if funcionario_id = 0 then
    begin
      Result := False;
      erro := 'Digital não encontrada';
    end
    else
    begin
      Result := validar_horario(funcionario_id, erro);
    end;
  end;
end;

procedure TdtmDados.salvar_funcionario(funcionario: TFuncionario);
begin
  qryFuncionario.Close;
  qryFuncionario.Params.ParamByName('registry').AsString := funcionario.Matricula;
  qryFuncionario.Open;

  qryFuncionario.Edit;
  qryFuncionario.FieldByName('fingerprint').AsString := funcionario.Digital;
  qryFuncionario.Post;
end;

function TdtmDados.validar_horario(funcionario_id: integer; var erro : string): boolean;
var tolerancia : integer;
  function ultima_batida : TDateTime;
  begin
    Result := Now;
    if not qryBatida.FieldByName('exit_1').IsNull then
      Result := qryBatida.FieldByName('exit_1').AsDateTime;
    if not qryBatida.FieldByName('entry_2').IsNull then
      Result := qryBatida.FieldByName('entry_2').AsDateTime;
    if not qryBatida.FieldByName('exit_2').IsNull then
      Result := qryBatida.FieldByName('exit_2').AsDateTime;
    if not qryBatida.FieldByName('entry_3').IsNull then
      Result := qryBatida.FieldByName('entry_3').AsDateTime;
    if not qryBatida.FieldByName('exit_3').IsNull then
      Result := qryBatida.FieldByName('exit_3').AsDateTime;

  end;
begin
  try
    qryBatida.Close;
    qryBatida.Params.ParamByName('employee_id').AsInteger := funcionario_id;
    qryBatida.Params.ParamByName('data').AsDate := Date;
    qryBatida.Open;

    qryHorario.Close;
    qryHorario.ParamByName('funcionario_id').AsInteger := funcionario_id;
    qryHorario.Open;

    if qryBatida.IsEmpty then
    begin
      qryBatida.Insert;
      qryBatida.FieldByName('employee_id').AsInteger := funcionario_id;
      qryBatida.FieldByName('date').AsDateTime := Date;
      qryBatida.FieldByName('entry_1').AsDateTime := Time;
      qryBatida.FieldByName('action').AsInteger := 1;
    end
    else
    begin
      qryBatida.Edit;
      if (qryBatida.FieldByName('action').AsInteger mod 2) <> 0 then
        tolerancia := qryHorario.FieldByName('input_tolerance').AsInteger
      else
        tolerancia := qryHorario.FieldByName('output_tolerance').AsInteger;
      if MinutesBetween(Now, ultima_batida) > tolerancia  then
      begin
        raise Exception.Create('Ponto já registrado! Aguarde a tolerância para o próximo registro.');
      end
      else
      begin
        if (qryBatida.FieldByName('action').AsInteger mod 2) <> 0 then
        begin
          if qryBatida.FieldByName('exit_1').IsNull then
            qryBatida.FieldByName('exit_1').AsDateTime := Time
          else if qryBatida.FieldByName('exit_2').IsNull then
            qryBatida.FieldByName('exit_2').AsDateTime := Time
          else
            qryBatida.FieldByName('exit_3').AsDateTime := Time;
        end
        else
        begin
          if qryBatida.FieldByName('entry_2').IsNull then
            qryBatida.FieldByName('entry_2').AsDateTime := Time
          else
            qryBatida.FieldByName('entry_3').AsDateTime := Time;
        end;
      end;
      qryBatida.FieldByName('action').AsInteger := qryBatida.FieldByName('action').AsInteger + 1;
    end;
    qryBatida.Post;
    Result := true;
  except
    on E:Exception do
    begin
      Result := False;
      erro := E.Message;
    end;
  end;


end;

end.
